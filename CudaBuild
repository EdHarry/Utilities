#!/usr/bin/python3

from subprocess import call
from os import path
import argparse

parser = argparse.ArgumentParser()

parser.add_argument("file", type=str,
                    help="source code file")
parser.add_argument("-O", "--OpLevel", type=str,
                    help="optimisation level ({full}, none, debug)",
                    choices=["full", "none", "debug", "f", "n", "d"])
parser.add_argument("-o", "--output", type=str,
                    help="output file name (default based on source code file name)")
parser.add_argument("-s", "--sample",
                    help="compile linking against cuda sample headers",
                    action="store_true")
parser.add_argument("-l", "--libs",
                    help="extra libs to link against")
parser.add_argument("-L", "--LibDirs",
                    help="extra library dirs to search for links")
parser.add_argument("-I", "--Include",
                    help="extra paths to search for header files")
parser.add_argument("-D", "--Define",
                    help="define pre-compile macro variables")
parser.add_argument("--omp",
                    help="compiler with omp enabled",
                    action="store_true")

args = parser.parse_args()

if args.OpLevel is "none" or args.OpLevel is "n":
    opFlags = "-O0"
elif args.OpLevel is "debug" or args.OpLevel is "d":
    opFlags = "-O0 --cuda-noopt-device-debug -g"
else:
    opFlags = "-Ofast -ffast-math -fcuda-flush-denormals-to-zero -fcuda-approx-transcendentals"

if args.output is None:
    output = path.splitext(args.file)[0]
else:
    output = args.output

#includeFlags = "-I/usr/local/cuda/include" 
includeFlags = "-I/usr/include/cuda" 
if args.sample:
    #includeFlags += " -I/usr/local/cuda/samples/common/inc"
    includeFlags += " -I/usr/share/cuda/samples/common/inc"

#linkerFlags = "-L/usr/local/cuda/lib64 -lstdc++ -lcudart_static -lcudadevrt -ldl -lrt -pthread"
linkerFlags = "-L/usr/lib64 -lstdc++ -lcudart_static -lcudadevrt -ldl -lrt -pthread"

precompDefs = ""

if args.OpLevel is "debug" or args.OpLevel is "d":
    precompDefs += " -DDEBUG"

if args.libs is not None:
    for lib in args.libs.split(","):
        linkerFlags += " -l" + lib

if args.LibDirs is not None:
    for lDir in args.LibDirs.split(","):
        linkerFlags += " -L" + lDir

if args.Include is not None:
    for iDir in args.Include.split(","):
        includeFlags += " -I" + iDir

if args.Define is not None:
    for Def in args.Define.split(","):
        precompDefs += " -D" + Def

command = "/usr/local/bin/clang++ -std=c++14 -mavx2 --no-cuda-version-check " + opFlags + " -o " + output + " " + args.file + " --cuda-gpu-arch=sm_61 " + includeFlags + " " + linkerFlags + precompDefs

if args.omp:
    command += " -fopenmp=libomp" 

print("Executing command: '" + command + "'")

call(command.split())

